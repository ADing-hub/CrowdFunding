<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 加载jdbc配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 配置自动扫描的包：主要是为了把Service扫描到IOC容器中-->
    <context:component-scan base-package="com.ding.crowd.service"/>
    <context:component-scan base-package="com.ding.crowd.mvc.config"/>
    <context:component-scan base-package="com.ding.crowd.mvc.interceptor"/>

    <!-- 配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
    </bean>

    <!-- 配置SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定-MyBatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!-- 指定Mapper.xml 文件-->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*Mapper.xml"/>
        <!-- 配置数据源-->
        <property name="dataSource" ref="dataSource"/>

        <!--配置插件-->
        <property name="plugins">
            <array>
                <!--配置PageHelper，用于帮助分页-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <!--设置数据库方言（这里就是mysql）-->
                            <prop key="helperDialect">mysql</prop>
                            <!--让PageHelper自动将浏览器传来的PageNum修正到正确范围-->
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 配置 MapperScannerConfigure-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ding.crowd.mapper"/>
    </bean>


    <!-- 配置事物管理器-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 装配数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>



    <!-- 配置事务切面-->
    <aop:config>
        <!-- 考虑到后期整合SpringSecurity，避免把UserDetailsService加入事务控制，让切入点表达式定位到Service-->
        <aop:pointcut id="pointcut" expression="execution(* *..*ServiceImpl.*(..))"/>
        <!-- 将切入点表达式和事务通知关联起来-->
        <aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
    </aop:config>

    <!-- 配置事物通知-->
    <tx:advice id="advice" transaction-manager="dataSourceTransactionManager">
        <!-- 配置事务属性-->
        <tx:attributes>
            <!-- 查询方法：配置只读属性，让数据库知道这是一个查询操作，能够进行一定优化-->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>

            <!-- 增删改方法：配置事务传播行为,回滚异常-->
            <!-- propagation属性：
                        REQUIRED：默认值：表示当前方法必须工作在事物中，如果当前线程上没有已经开启的事物，则自己开启新事务，如果已经开启，那么就使用这个已有的事务
                                顾虑；用别人的事务有可能”被“回滚
                        REQUIRES_NEW：建议使用的值，表示当前方法必须工作在事务中，如果当前线程上没有已经开启的事务，则自己开新事务，就算是已经有了，也在自己开启的事务中运行
                                好处：不受其他事务回滚的影响
            -->
            <!-- rollback-for属性：配置事务方法针对什么样的异常回滚
                        默认：运行时回滚
                        建议：编译时异常和运行时异常都回滚
            -->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置 BCryptPasswordEncoder -->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


</beans>